#pragma once
#include "Byte88.h"
#include <Windows.h>

// Char stored as binary font; each bit is a pixel on/off
// Made with simple enconding program using ConsoleEx drawSprite 
// and mouse events to draw sprites in the console
// Indexed by ASCII code - 32

static const UINT64 PixelFont[96] {
	0x0000000000000000, // Space
	0x1000101010101000, // !
	0x0000000024244800, // "
	0x28287C287C282800, // #
	0x0000000000000000,
	0x64640810204C4C00, // %
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0018180018180000, // :
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x2424243C24241800,	// A
	0x1C24241C24241C00, // B
	0x3844040404443800, // C
	0x3C44444444443C00, // D
	0x3C04043C04043C00, // E
	0x0404043C04043C00, // F
	0x3844446404443800, // G
	0x4444447C44444400, // H
	0x3810101010103800, // I
	0x0814101010103800, // J
	0x4424140C14244400, // K
	0x7C04040404040400, // L
	0x4444445454282800, // M
	0x44645454544C4400, // N
	0x3844444444443800, // O
	0x0404043C44443C00, // P
	0xB844644444443800, // Q
	0x4444443C44443C00, // R
	0x3844403804443800, // S
	0x1010101010107C00, // T
	0x3844444444444400, // U
	0x1028284444444400, // V
	0x2828545444444400, // W
	0x4444281028444400, // X
	0x1010101028444400, // Y
	0x7C04081020407C00, // Z
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000,
	0x0000000000000000
};

// Get a sprite representing a certain character from the PixelFont.
Byte88 getCharSprite(char chr, byte bgCol, byte fillCol, byte outlineCol) {
	// Check if char is in standard printable ASCII range
	if (chr >= 32 && chr < 128) {
		Byte88 sprite = Byte88(PixelFont[chr - 32], bgCol, fillCol);

		for (int r = 0; r < 8; r++) {
			for (int c = 0; c < 7; c++)
			{
				if (sprite[r << 3 | c] == bgCol && sprite[r << 3 | c + 1] == fillCol)
					sprite[r << 3 | c] = outlineCol;

			}
		}
		return sprite;
	}

	return Byte88(bgCol);
}